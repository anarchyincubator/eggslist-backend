# Generated by Django 4.0.2 on 2022-10-10 16:34
import django.contrib.gis.db.models.fields
import django.contrib.gis.geos.point
import pandas as pd
from django.conf import settings
from django.contrib.gis.geos.point import Point
from django.db import migrations, models
from django.db.transaction import atomic


@atomic
def bulk_update_zip_codes(queryset, us_geo_data_zip):
    for zip_code in queryset:
        zip_code_pd = us_geo_data_zip[us_geo_data_zip.zip == int(zip_code.system_name)]
        try:
            zip_code_pd = zip_code_pd.iloc[0]
        except IndexError:
            print("ERRRROR====", zip_code.system_name, "\n\n\n\n\n")
            continue
        zip_code.location = Point(x=zip_code_pd.lng, y=zip_code_pd.lat)
        zip_code.save()


@atomic
def bulk_update_cities(queryset, us_geo_data_cities):
    for city in queryset:
        city_pd = us_geo_data_cities[
            (
                (us_geo_data_cities["city"] == city.name)
                | (us_geo_data_cities["city_alt"] == city.name)
            )
            & (us_geo_data_cities["state_id"] == city.state.name)
        ]
        try:
            city_pd = city_pd.iloc[0]
        except IndexError:
            print("ERRRROR====", city.name, city.state.name, "\n\n\n\n\n")
            continue
        city.location = Point(x=city_pd.lng, y=city_pd.lat)
        city.state.full_name = city_pd.state_name
        city.save()
        city.state.save()


def add_latts_and_longs(apps, schema_editor):
    Country = apps.get_model("site_configuration", "LocationCountry")
    Country.slug_field_name = "name"
    Country.slug_field_unique = True
    State = apps.get_model("site_configuration", "LocationState")
    State.slug_field_name = "name"
    State.slug_field_unique = True
    City = apps.get_model("site_configuration", "LocationCity")
    State.slug_field_name = "name"
    State.slug_field_uniqe = True
    ZipCode = apps.get_model("site_configuration", "LocationZipCode")
    ZipCode.slug_field_name = "name"
    ZipCode.slug_field_unique = True

    us_geo_data_zip = pd.read_csv(settings.GEO_ZIP_PATH)
    us_geo_data_cities = pd.read_csv(settings.GEO_CITIES_PATH)

    qs_zip_code = ZipCode.objects.all()
    qs_cities = City.objects.select_related("state")

    bulk_update_zip_codes(qs_zip_code, us_geo_data_zip)
    bulk_update_cities(qs_cities, us_geo_data_cities)

    print("\n\n\n\n\n========================================================")
    print("Assigning location coordinates to cities that don't have locations")
    print("Just use the first received zip code's location of the provided city")
    print(f"There will be {City.objects.filter(location__isnull=True).count()} cities")
    for city in City.objects.filter(location__isnull=True):
        zip_code = ZipCode.objects.filter(city=city).first()
        city.location = zip_code.location
        city.save()


class Migration(migrations.Migration):

    dependencies = [
        ("site_configuration", "0006_locationzipcode_system_name"),
    ]

    operations = [
        migrations.AddField(
            model_name="locationcity",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(
                blank=True, null=True, srid=4326, verbose_name="location"
            ),
        ),
        migrations.AddField(
            model_name="locationstate",
            name="full_name",
            field=models.CharField(default="", max_length=64, verbose_name="full name"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="locationzipcode",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(
                blank=True, null=True, srid=4326, verbose_name="location"
            ),
        ),
        migrations.RunPython(add_latts_and_longs, migrations.RunPython.noop),
    ]
